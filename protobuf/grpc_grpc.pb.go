// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: protobuf/grpc.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TickerClient is the client API for Ticker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TickerClient interface {
	// AppendEntries is the function that the Leader sent to followers to sync
	// data and keep leadership.
	AppendEntries(ctx context.Context, in *TickRequest, opts ...grpc.CallOption) (*TickResponse, error)
	// RequestVote is the function that the Candidate sent to followers to
	// requests their votes for leader election.
	RequestVote(ctx context.Context, in *TickRequest, opts ...grpc.CallOption) (*TickResponse, error)
}

type tickerClient struct {
	cc grpc.ClientConnInterface
}

func NewTickerClient(cc grpc.ClientConnInterface) TickerClient {
	return &tickerClient{cc}
}

func (c *tickerClient) AppendEntries(ctx context.Context, in *TickRequest, opts ...grpc.CallOption) (*TickResponse, error) {
	out := new(TickResponse)
	err := c.cc.Invoke(ctx, "/protobuf.Ticker/AppendEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tickerClient) RequestVote(ctx context.Context, in *TickRequest, opts ...grpc.CallOption) (*TickResponse, error) {
	out := new(TickResponse)
	err := c.cc.Invoke(ctx, "/protobuf.Ticker/RequestVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TickerServer is the server API for Ticker service.
// All implementations must embed UnimplementedTickerServer
// for forward compatibility
type TickerServer interface {
	// AppendEntries is the function that the Leader sent to followers to sync
	// data and keep leadership.
	AppendEntries(context.Context, *TickRequest) (*TickResponse, error)
	// RequestVote is the function that the Candidate sent to followers to
	// requests their votes for leader election.
	RequestVote(context.Context, *TickRequest) (*TickResponse, error)
	mustEmbedUnimplementedTickerServer()
}

// UnimplementedTickerServer must be embedded to have forward compatible implementations.
type UnimplementedTickerServer struct {
}

func (UnimplementedTickerServer) AppendEntries(context.Context, *TickRequest) (*TickResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendEntries not implemented")
}
func (UnimplementedTickerServer) RequestVote(context.Context, *TickRequest) (*TickResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestVote not implemented")
}
func (UnimplementedTickerServer) mustEmbedUnimplementedTickerServer() {}

// UnsafeTickerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TickerServer will
// result in compilation errors.
type UnsafeTickerServer interface {
	mustEmbedUnimplementedTickerServer()
}

func RegisterTickerServer(s grpc.ServiceRegistrar, srv TickerServer) {
	s.RegisterService(&Ticker_ServiceDesc, srv)
}

func _Ticker_AppendEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TickRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TickerServer).AppendEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Ticker/AppendEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TickerServer).AppendEntries(ctx, req.(*TickRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ticker_RequestVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TickRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TickerServer).RequestVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Ticker/RequestVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TickerServer).RequestVote(ctx, req.(*TickRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Ticker_ServiceDesc is the grpc.ServiceDesc for Ticker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ticker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.Ticker",
	HandlerType: (*TickerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AppendEntries",
			Handler:    _Ticker_AppendEntries_Handler,
		},
		{
			MethodName: "RequestVote",
			Handler:    _Ticker_RequestVote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/grpc.proto",
}
